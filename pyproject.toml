[tool.poetry]
name = "SM_interview_prep_2023"
version = "0.1.0"
description = ""
license = "MIT-Clause"
authors = ["Shaikat Majumdar <sm2774us@gmail.com>"]
maintainers = ["Shaikat Majumdar <sm2774us@gmail.com>"]
keywords = [
    "Coding Interview",
    "Data Structures",
    "Algorithms",
	"Leet Code"
]
readme = "README.md"
repository = "https://www.github.com/sm2774us/SM_interview_prep_2023/tree/main"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: Implementation :: CPython",
    "Typing :: Typed",
    # See https://pypi.org/classifiers/ for more classifiers
]
include = [
    { path = "dsa_and_algorithms" },
    { path = "coding_interview_problems" },	
	{ path = "curated_list_of_75_leetcode_problems" },
	{ path = "competitive_programming_problems" },
	{ path = "amazon_interview_prep" },
	{ path = "facebook_interview_prep" }
]
exclude = [
    "leetcode_problems"
]

[project.urls]
GitHub = "https://www.github.com/sm2774us/SM_interview_prep_2023"

# ========================== #
#      [tool.*] Sections     #
# ========================== #

[tool.poetry.dependencies]
python = "^3.11"
natsort = "^8.2.0"

[tool.poetry.dev-dependencies]
black = "^23.3.0"
isort = "^5.11.4"
pylint = "^2.15.9"
pytest = "^7.2.0"
pytest-benchmark = { version = "^4.0.0", extras = ["histogram"] }

[tool.poetry.scripts]
dsa_and_algorithms = "dsa_and_algorithms.main:main"
coding_interview_problems = "coding_interview_problems.main:main"
curated_list_of_75_leetcode_problems = "curated_list_of_75_leetcode_problems.main:main"
competitive_programming_problems = "competitive_programming_problems.main:main"
amazon_interview_prep = "amazon_interview_prep.main:main"
facebook_interview_prep = "facebook_interview_prep.main:main"

[tool.poetry.plugins."dsa_and_algorithms.days"]
day1 = "dsa_and_algorithms.001_linear_data_structures.arrays_and_strings:main"
day2 = "dsa_and_algorithms.001_linear_data_structures.linked_lists_part_1:main"
day3 = "dsa_and_algorithms.001_linear_data_structures.linked_lists_part_2:main"
day4 = "dsa_and_algorithms.002_non_linear_data_structures.trees:main"
day5 = "dsa_and_algorithms.002_non_linear_data_structures.graphs:main"
day6 = "dsa_and_algorithms.002_non_linear_data_structures.heaps:main"
day7 = "dsa_and_algorithms.003_abstract_data_types.stacks_and_queues:main"
day8 = "dsa_and_algorithms.003_abstract_data_types.sets_and_maps:main"
day9 = "dsa_and_algorithms.004_general_algorithms.recursion:main"
day10 = "dsa_and_algorithms.004_general_algorithms.sorting_and_searching:main"

[tool.poetry.plugins."coding_interview_problems.days"]

[tool.poetry.plugins."curated_list_of_75_leetcode_problems.days"]

[tool.poetry.plugins."competitive_programming_problems.days"]

[tool.poetry.plugins."amazon_interview_prep.days"]

[tool.poetry.plugins."facebook_interview_prep.days"]

[tool.black]
line-length = 200
target_version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''.*test_.*'''

[tool.isort]
profile = "black"
line_length = 200
multi_line_output = 3
use_parentheses = true
include_trailing_comma = true

[tool.pylint.'MESSAGES CONTROL']
# C0111: Missing docstrings
# C0301: Line too long (Note: This is all handled by black now)
# C0304: Final newline missing
# R0801: Similar lines in other files
# R0903: Too few public methods
# R0912: Too many branches
# R0914: Too many local variables
# W0511: FIXME
# E1136: Unsubscriptable object (Disabled due to Python 3.9 compatibility bug in pylint)
disable = "C0111,C0301,C0302,C0304,R0801,R0903,R0912,R0914,W0511,E1136,W1514"

[tool.pylint.BASIC]
module-rgx = "(([a-z_][a-z0-9_]*)|([a-z][a-zA-Z0-9]+))$"

[tool.pylint.FORMAT]
max-line-length = "200"

[tool.pylint.DESIGN]
max-args = "14"

[tool.pylint.MASTER]
ignore = "docs/"
extension-pkg-whitelist = ["pygit2"]

[tool.pytest.ini_options]
addopts = '--doctest-modules --benchmark-disable --benchmark-sort=fullname'
required_plugins = ['pytest-benchmark']

[build-system]
requires = ["poetry-core>=1.3.1"]
build-backend = "poetry.core.masonry.api"
